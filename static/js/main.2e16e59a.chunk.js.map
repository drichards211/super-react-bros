{"version":3,"sources":["helpers.js","store.js","timer.js","scoreboard.js","mariocontainer.js","deathscreen.js","buttons.js","action-buttons.js","serviceWorker.js","index.js"],"names":["AddLeadingZeroes","number","places","String","padStart","NoiseMaker","requestedSound","noise","console","log","Audio","play","initialState","brother","super","fire","invincible","starManTimer","alive","inPlay","helpVisible","points","lives","coins","timer","buttonDepressed","buttonMushroom","buttonFire","buttonCoin","buttonStar","buttonEnemy","buttonOneUp","buttonBrosToggle","buttonQuestion","actionButtonDepressed","buttonJump","dPad","store","createStore","state","action","type","parseInt","payload","getState","countDown","starManCountDown","StartTimer","setInterval","marioState","clearInterval","StopStarManTimer","dispatch","ManageDeathScreen","StopAllTimers","setTimeout","ScoreBoard","useDispatch","useSelector","useEffect","PlayerNumLives","toUpperCase","className","PointsCounter","CoinCounter","numCoins","handleCoinCounter","Timer","MarioContainer","marioClass","DeathScreen","messageClass","userMessage","tryAgain","MarioMessages","message","onClick","Buttons","buttonClass","buttonStarSpan","buttonBrosSpan","Object","keys","forEach","key","replace","handleButtonStar","animateButtonPress","buttonName","handleEnemy","handleFireLogic","ActionButtons","animateDpad","direction","buttonStop","buttonWalkLeft","buttonWalkRight","buttonClimb","buttonDuck","Boolean","window","location","hostname","match","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2e16e59a.chunk.js","sourcesContent":["export function AddLeadingZeroes(number, places) {\r\n  return String(number).padStart(places, \"0\"); // Stringifies number and adds leading zeroes:\r\n}\r\n\r\nexport function CapitalizeMe(string) {\r\n  return string.toUpperCase();\r\n}\r\n\r\nexport function NoiseMaker(requestedSound) {\r\n  let noise = requestedSound || \"silent\";\r\n  if (noise !== \"silent\") {\r\n    console.log(`NoiseMaker() ran: \"${noise}.mp3\"`)\r\n    new Audio(`/super-react-bros/${noise}.mp3`).play();\r\n  }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport { AddLeadingZeroes } from \"./helpers\";\r\n\r\n// REDUX STATE MANAGEMENT:\r\nconst initialState = {\r\n  brother: \"mario\",\r\n  super: false,\r\n  fire: false,\r\n  invincible: false,\r\n  starManTimer: 0,\r\n  alive: true,\r\n  inPlay: true,\r\n  helpVisible: false,\r\n  points: \"000000\",\r\n  lives: 3,\r\n  coins: 0,\r\n  timer: 400,\r\n  buttonDepressed: {\r\n    buttonMushroom: false,\r\n    buttonFire: false,\r\n    buttonCoin: false,\r\n    buttonStar: false,\r\n    buttonEnemy: false,\r\n    buttonOneUp: false,\r\n    buttonBrosToggle: false,\r\n    buttonQuestion: false,\r\n  },\r\n  actionButtonDepressed: {\r\n    buttonJump: false,\r\n    buttonFire: false,\r\n  },\r\n  dPad: \"d-right\",\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n  if (\r\n    action.type !== \"DECREMENT_TIMER\" &&\r\n    action.type !== \"DECREMENT_STARMANTIMER\"\r\n  ) {\r\n    console.log(`reducer() ran ${action.type}`);\r\n  }\r\n  switch (action.type) {\r\n    case \"INCREMENT_LIVES\":\r\n      return {\r\n        ...state,\r\n        lives: state.lives + 1,\r\n      };\r\n    case \"DECREMENT_LIVES\":\r\n      return {\r\n        ...state,\r\n        lives: state.lives - 1,\r\n      };\r\n    case \"START_NEW_LIFE\":\r\n      return {\r\n        ...state,\r\n        alive: true,\r\n        invincible: false,\r\n        starManTimer: 0,\r\n        super: false,\r\n        fire: false,\r\n        timer: 400,\r\n      };\r\n    case \"MAKE_SUPER\":\r\n      return {\r\n        ...state,\r\n        super: true,\r\n        points: AddLeadingZeroes(parseInt(state.points) + 1000, 6),\r\n      };\r\n    case \"MAKE_FIRE\":\r\n      return {\r\n        ...state,\r\n        fire: true,\r\n        super: true,\r\n        points: AddLeadingZeroes(parseInt(state.points) + 1000, 6),\r\n      };\r\n    case \"MAKE_INVINCIBLE\":\r\n      return {\r\n        ...state,\r\n        invincible: true,\r\n        starManTimer: 10,\r\n        points: AddLeadingZeroes(parseInt(state.points) + 1000, 6),\r\n      };\r\n    case \"END_INVINCIBLE\":\r\n      return {\r\n        ...state,\r\n        invincible: false,\r\n        starManTimer: 0,\r\n      };\r\n    case \"MAKE_SMALL\":\r\n      return {\r\n        ...state,\r\n        super: false,\r\n      };\r\n    case \"LOSE_FIRE\":\r\n      return {\r\n        ...state,\r\n        fire: false,\r\n        super: false,\r\n      };\r\n    case \"LOSE_LIFE\":\r\n      return {\r\n        ...state,\r\n        alive: false,\r\n        lives: state.lives - 1,\r\n      };\r\n    case \"SELECT_MARIO\":\r\n      return {\r\n        ...state,\r\n        brother: \"mario\",\r\n      };\r\n    case \"SELECT_LUIGI\":\r\n      return {\r\n        ...state,\r\n        brother: \"luigi\",\r\n      };\r\n    case \"ADD_COIN\":\r\n      return {\r\n        ...state,\r\n        coins: state.coins + 1,\r\n        points: AddLeadingZeroes(parseInt(state.points) + 200, 6),\r\n      };\r\n    case \"RESET_100_COINS\":\r\n      return {\r\n        ...state,\r\n        coins: 0,\r\n        lives: state.lives + 1,\r\n      };\r\n    case \"RESET_GAME\":\r\n      // RESET marioState to initial paramaters, but keep current brother:\r\n      return {\r\n        ...initialState,\r\n        brother: state.brother,\r\n      };\r\n    case \"RESET_TIMER\":\r\n      return {\r\n        ...initialState,\r\n        timer: 400,\r\n      };\r\n    case \"RESET_STARMANTIMER\":\r\n      return {\r\n        ...state,\r\n        starManTimer: 0,\r\n      };\r\n    case \"DECREMENT_TIMER\":\r\n      return {\r\n        ...state,\r\n        timer: state.timer - 1,\r\n      };\r\n    case \"DECREMENT_STARMANTIMER\":\r\n      return {\r\n        ...state,\r\n        starManTimer: state.starManTimer - 1,\r\n      };\r\n    case \"SHOW_DEATH_SCREEN\":\r\n      return {\r\n        ...state,\r\n        inPlay: false,\r\n      };\r\n    case \"HIDE_DEATH_SCREEN\":\r\n      return {\r\n        ...state,\r\n        inPlay: true,\r\n      };\r\n    case \"SHOW_HELP\":\r\n      return {\r\n        ...state,\r\n        helpVisible: true,\r\n      };\r\n    case \"DEPRESS_BUTTON\":\r\n      return {\r\n          ...state,\r\n          buttonDepressed: {\r\n            ...state.buttonDepressed,\r\n            [action.payload]: true,\r\n          }\r\n      };\r\n    case \"UNPRESS_BUTTON\":\r\n      return {\r\n          ...state,\r\n          buttonDepressed: {\r\n            ...state.buttonDepressed,\r\n            [action.payload]: false,\r\n          }\r\n      };\r\n    case \"DEPRESS_ACTION_BUTTON\":\r\n      return {\r\n          ...state,\r\n          actionButtonDepressed: {\r\n            ...state.actionButtonDepressed,\r\n            [action.payload]: true,\r\n          }\r\n      };\r\n    case \"UNPRESS_ACTION_BUTTON\":\r\n      return {\r\n          ...state,\r\n          actionButtonDepressed: {\r\n            ...state.actionButtonDepressed,\r\n            [action.payload]: false,\r\n          }\r\n      };\r\n    case \"UPDATE_DPAD\":\r\n      return {\r\n        ...state,\r\n        dPad: action.payload,\r\n      };\r\n    default:\r\n      console.log(`${action.type} is an invalid reducer action.`);\r\n      return state; // Return the unchanged state if action is unclear\r\n  }\r\n}\r\n\r\nconst store = createStore(reducer);\r\nconsole.log(\"created\", store.getState());\r\n\r\nexport default store;\r\n","import { NoiseMaker } from \"./helpers\";\r\nimport store from \"./store\";\r\n\r\n// Variables declared early so clearInterval() can actually stop the timers:\r\nlet countDown;\r\nlet starManCountDown;\r\n\r\nexport function StartTimer() {\r\n  console.log(\"StartTimer() ran\");\r\n  countDown = setInterval(function () {\r\n    const marioState = store.getState(); // obtain fresh copy of redux state on each iteration:\r\n    if (marioState.timer === 101) {\r\n      NoiseMaker(\"time-warning\");\r\n    }\r\n    if (marioState.timer === 1) {\r\n      StopTimer();\r\n      StopStarManTimer(); // Stop StarMan countdown if Mario/Luigi is invincible when timer runs out\r\n      store.dispatch({ type: \"DECREMENT_TIMER\" }); // Final decrement to zero\r\n      store.dispatch({ type: \"LOSE_LIFE\" }); // Kill Mario/Luigi if timer runs out\r\n      NoiseMaker(\"death\");\r\n      ManageDeathScreen();\r\n    } else {\r\n      store.dispatch({ type: \"DECREMENT_TIMER\" });\r\n    }\r\n  }, 420);\r\n}\r\n\r\nexport function StopTimer() {\r\n  console.log(\"StopTimer() ran\");\r\n  clearInterval(countDown);\r\n}\r\n\r\nexport function StartStarManTimer() {\r\n  console.log(\"StartStarManTimer() ran\");\r\n  starManCountDown = setInterval(function () {\r\n    const marioState = store.getState(); // obtain fresh copy of redux state on each iteration:\r\n    if (marioState.starManTimer === 1) {\r\n      StopStarManTimer();\r\n      store.dispatch({ type: \"END_INVINCIBLE\" });\r\n    } else {\r\n      store.dispatch({ type: \"DECREMENT_STARMANTIMER\" });\r\n    }\r\n  }, 1000);\r\n}\r\n\r\nexport function StopStarManTimer() {\r\n  console.log(\"StopStarManTimer() ran\");\r\n  clearInterval(starManCountDown);\r\n}\r\n\r\nexport function StopAllTimers() {\r\n  console.log(\"StopAllTimers() ran\");\r\n  clearInterval(countDown);\r\n  clearInterval(starManCountDown);\r\n}\r\n\r\nexport function ManageDeathScreen() {\r\n  // Wait 2 seconds for death animation to finish, then show Death Screen:\r\n  console.log(\"ManageDeathScreen() ran\");\r\n  const marioState = store.getState();\r\n  setTimeout(function () {\r\n    store.dispatch({ type: \"SHOW_DEATH_SCREEN\" });\r\n    if (marioState.lives === 0) {\r\n      NoiseMaker(\"game-over\");\r\n    }\r\n    if (marioState.lives > 0) {\r\n      // Mario-Luigi has extra lives remaining. Hold death screen for 3 seconds, then resume game.\r\n      /* if (marioState.timer) */\r\n      setTimeout(function () {\r\n        store.dispatch({ type: \"START_NEW_LIFE\" });\r\n        store.dispatch({ type: \"HIDE_DEATH_SCREEN\" });\r\n        StartTimer();\r\n      }, 3000);\r\n    }\r\n  }, 2000);\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { StartTimer } from './timer';\r\nimport { AddLeadingZeroes, NoiseMaker } from './helpers'; \r\n\r\nexport default function ScoreBoard() {\r\n\r\n  // Global state management via Redux Hooks:\r\n  const dispatch = useDispatch();\r\n  const marioState = useSelector((state) => state);\r\n\r\n  // Start timer on initial load only:\r\n  useEffect(() => {\r\n    StartTimer();\r\n  }, []);\r\n\r\n  //SCOREBOARD LOGIC HANDLERS:\r\n  const handleCoinCounter = () => {\r\n    let numCoins = AddLeadingZeroes(marioState.coins, 2);\r\n    if (marioState.coins > 99) {\r\n      NoiseMaker(\"1up\"); \r\n      dispatch({ type: \"RESET_100_COINS\" }); \r\n    }\r\n    return numCoins;\r\n  }\r\n\r\n  // SCOREBOARD CHILDREN:\r\n  const PlayerNumLives = ( <div> {marioState.brother.toUpperCase()}<span className=\"small-spacer\">×</span>{marioState.lives} </div> );\r\n    \r\n  const PointsCounter = () => {\r\n    return ( <div> {marioState.points} </div> );\r\n  }\r\n  \r\n  const CoinCounter = () => {\r\n    return ( <div \r\n      className=\"coin-counter\">\r\n      <div className=\"mini-coin-sprite\"></div>\r\n        ×{handleCoinCounter()} \r\n    </div> );\r\n  }\r\n  \r\n  const Timer = () => {\r\n    return ( <div> TIME <br /> \r\n      {AddLeadingZeroes(marioState.timer, 3)} \r\n    </div> )\r\n  }\r\n\r\n  return ( <div> \r\n    <div className=\"scoreboard row\"> \r\n      <div className=\"sb-col-01\"> \r\n        {PlayerNumLives} \r\n        <PointsCounter/>\r\n      </div> \r\n      <div className=\"sb-col-02\">\r\n        <CoinCounter/> \r\n      </div>\r\n      <div className=\"sb-col-03\"> \r\n        <Timer/>\r\n      </div>\r\n    </div>\r\n  </div> );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nexport default function MarioContainer() {\r\n  const dispatch = useDispatch();\r\n  const marioState = useSelector((state) => state);\r\n\r\n  let marioClass = \"Render-brother \"; // Holds different CSS class names for rendering Mario/Luigi sprites\r\n\r\n  // MARIO SPRITE DISPLAY LOGIC:\r\n  switch (true) {\r\n    case marioState.alive && marioState.invincible: // Mario-Luigi is INVINCIBLE:\r\n      marioClass += marioState.super ? \"invincible-super\" : \"invincible\";\r\n      break;\r\n    case marioState.alive && marioState.brother === \"mario\": // Mario is ALIVE:\r\n      if (marioState.fire) {\r\n        // Mario is FIRE:\r\n        marioClass += \"fire\";\r\n      } else {\r\n        marioClass += marioState.super ? \"mario-super\" : \"mario\"; // SUPER Mario / Mario\r\n      }\r\n      break;\r\n    case marioState.alive && marioState.brother === \"luigi\": // Luigi is ALIVE:\r\n      if (marioState.fire) {\r\n        // Luigi is FIRE:\r\n        marioClass += \"fire\";\r\n      } else {\r\n        marioClass += marioState.super ? \"luigi-super\" : \"luigi\"; // SUPER Luigi / Luigi\r\n      }\r\n      break;\r\n    default:\r\n      // MARIO-LUIGI is DEAD:\r\n      switch (true) {\r\n        case marioState.timer === 0 && marioState.fire: // TIMER ran out while Mario-Luigi was Fire:\r\n          marioClass += \"fire-dead\";\r\n          console.log(\"Timer ran out while Mario-Luigi was Fire\");\r\n          break;\r\n        case marioState.timer === 0: // TIMER ran out:\r\n          console.log(\"Timer ran out\");\r\n          if (marioState.brother === \"luigi\") {\r\n            marioClass += \"luigi-dead\";\r\n          } else {\r\n            marioClass += \"mario-dead\";\r\n          }\r\n          break;\r\n        case marioState.brother === \"luigi\": // Luigi is DEAD:\r\n          marioClass += \"luigi-dead\";\r\n          break;\r\n        default:\r\n          // Mario is DEAD:\r\n          marioClass += \"mario-dead\";\r\n        }\r\n  }\r\n\r\n  return (\r\n    <div className=\"mario-container\">\r\n      {\" \"}\r\n      <div className={marioClass}></div>{\" \"}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { StartTimer, StopAllTimers } from \"./timer\";\r\n\r\nexport default function DeathScreen() {\r\n  const dispatch = useDispatch();\r\n  const marioState = useSelector((state) => state);\r\n\r\n  let messageClass = \"message-holder \"; // Holds different CSS class names for the Death and Game Over messages\r\n  let userMessage = \"\";\r\n  let tryAgain = \"button-restart \";\r\n\r\n  const handleNewGame = () => {\r\n    dispatch({ type: \"RESET_GAME\" });\r\n    StopAllTimers();\r\n    StartTimer();\r\n  };\r\n\r\n  const MarioMessages = ({ message }) => {\r\n    return (\r\n      <div className={messageClass}>\r\n        {\" \"}\r\n        <div className=\"message-contents\">\r\n          {message}\r\n          <br /><br />\r\n          <button\r\n            className={tryAgain}\r\n            onClick={() => handleNewGame()}\r\n          >\r\n            TRY AGAIN ?\r\n          </button>\r\n        </div>{\" \"}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // DEATH SCREEN DISPLAY LOGIC:\r\n  if (!marioState.inPlay) {\r\n    // Display Death Screen:\r\n    messageClass += \"death-screen\";\r\n  }\r\n  if (!marioState.alive) {\r\n    // Mario-Luigi is DEAD:\r\n    if (marioState.timer === 0) {\r\n      // Timer ran out:\r\n      userMessage = marioState.lives === 0 ? \"GAME OVER\" : \"TIME UP\";\r\n      tryAgain += marioState.lives === 0 ? \"show-button\" : \"\";\r\n    } else {\r\n      // Mario-Luigi DEAD from enemy:\r\n      userMessage =\r\n        marioState.lives === 0\r\n          ? \"GAME OVER\"\r\n          : marioState.brother === \"luigi\"\r\n          ? \"LUIGI × \" + marioState.lives\r\n          : \"MARIO × \" + marioState.lives;\r\n      tryAgain += marioState.lives === 0 ? \"show-button\" : \"\";\r\n      \r\n    }\r\n  }\r\n\r\n  return <MarioMessages message={userMessage} />;\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\"; // redux hooks specific\r\nimport { NoiseMaker } from \"./helpers\";\r\nimport {\r\n  StartStarManTimer,\r\n  StopStarManTimer,\r\n  StartTimer,\r\n  StopAllTimers,\r\n  ManageDeathScreen,\r\n} from \"./timer\";\r\n\r\nexport default function Buttons() {\r\n  // Global state management via Redux Hooks:\r\n  const dispatch = useDispatch();\r\n  const marioState = useSelector((state) => state);\r\n\r\n  // Holds update-able CSS class names for buttons:\r\n  /* let buttonStarClass = \"item-button button-starman \"; */\r\n  /* let buttonStarSpanClass = \"\"; */\r\n  let buttonBrosToggleClass = \"\";\r\n  let buttonClass = {\r\n    buttonMushroom: \"item-button button-mushroom \",\r\n    buttonFire: \"item-button button-fire \",\r\n    buttonStar: \"item-button button-starman \",\r\n    buttonStarSpan: \"\",\r\n    buttonEnemy: \"item-button button-enemy \",\r\n    buttonCoin: \"item-button button-coin \",\r\n    buttonOneUp: \"item-button button-oneup \",\r\n    buttonBrosToggle: \"item-button button-bros-toggle \",\r\n    buttonBrosSpan: \"\",\r\n    buttonQuestion: \"item-button button-question \",\r\n  }\r\n\r\n  // Manage buttonStar appearance:\r\n  switch (true) {\r\n    case marioState.invincible: // Mario-Luigi is INVINCIBLE:\r\n      buttonClass.buttonStar += \"show-star-countdown \";\r\n      buttonClass.buttonStarSpan += \"flicker-star \";\r\n      break;\r\n    default:\r\n      // Mario-Luigi is NOT invincible:\r\n      buttonClass.buttonStar += \"hide-star-countdown \";\r\n  }\r\n\r\n  // Manage buttonToggleBros appearance:\r\n  switch (true) {\r\n    case marioState.brother === \"luigi\": // Active bros is Luigi:\r\n      buttonClass.buttonBrosSpan += \"toggle-mario\"; // Display Mario toggle\r\n      break;\r\n    default:\r\n      // Active bros is Mario:\r\n      buttonClass.buttonBrosSpan += \"toggle-luigi\"; // Display Luigi toggle\r\n  }\r\n\r\n  // Manage button Depressed states:\r\n  Object.keys(marioState.buttonDepressed).forEach(function (key) {\r\n    switch (true) {\r\n      case marioState.buttonDepressed[key]: // Button has been pressed:\r\n        buttonClass[key]  += \"depressed \"; // Add \"depressed\" class to button\r\n        break;\r\n      default:\r\n        // Restore normal button appearance\r\n        buttonClass[key] = buttonClass[key].replace(\"depressed \",\"\");\r\n    }\r\n  });\r\n  \r\n  // Button-specific helper functions:\r\n  const handleEnemy = () => {\r\n    switch (true) {\r\n      case marioState.invincible: // Mario/Luigi is Invincible, no state change\r\n        break;\r\n      case marioState.fire:\r\n        dispatch({ type: \"LOSE_FIRE\" });\r\n        NoiseMaker(\"shrink\");\r\n        break;\r\n      case marioState.super:\r\n        dispatch({ type: \"MAKE_SMALL\" });\r\n        NoiseMaker(\"shrink\");\r\n        break;\r\n      default:\r\n        StopAllTimers();\r\n        dispatch({ type: \"LOSE_LIFE\" });\r\n        NoiseMaker(\"death\");\r\n        ManageDeathScreen();\r\n    }\r\n  };\r\n\r\n  const handleNewGame = () => {\r\n    dispatch({ type: \"RESET_GAME\" });\r\n    StopAllTimers();\r\n    StartTimer();\r\n  };\r\n\r\n  const newLifeLogic = () => {\r\n    if (marioState.alive) {\r\n      alert(\"Mario/Luigi is still alive. Try dying first.\");\r\n    } else if (marioState.lives > 0) {\r\n      // Load new life, reset state\r\n      dispatch({ type: \"START_NEW_LIFE\" });\r\n      StartTimer();\r\n    } else {\r\n      alert(\"GAME OVER. Please start a new game.\");\r\n    }\r\n  };\r\n\r\n  const handleFireLogic = () => {\r\n    switch (marioState.super) {\r\n      case true:\r\n        dispatch({ type: \"MAKE_FIRE\" });\r\n        break;\r\n      default:\r\n        dispatch({ type: \"MAKE_SUPER\" });\r\n    }\r\n  };\r\n\r\n  const handleButtonStar = () => {\r\n    dispatch({ type: \"MAKE_INVINCIBLE\" });\r\n    StopStarManTimer(); // End any ongoing timer before starting another countdown\r\n    StartStarManTimer();\r\n  };\r\n\r\n  const handleButtonEndStar = () => {\r\n    dispatch({ type: \"END_INVINCIBLE\" });\r\n    StopStarManTimer();\r\n  };\r\n\r\n  const handlePlayerToggle = () => {\r\n    if (marioState.brother === \"mario\") {\r\n      dispatch({ type: \"SELECT_LUIGI\" });\r\n    } else {\r\n      dispatch({ type: \"SELECT_MARIO\" });\r\n    }\r\n  };\r\n\r\n  const animateButtonPress = (buttonName) => {\r\n    dispatch({ type: `DEPRESS_BUTTON`, payload: `${buttonName}` });\r\n    setTimeout(function () {\r\n      dispatch({ type: `UNPRESS_BUTTON`, payload: `${buttonName}` });  \r\n    }, 400);\r\n  }\r\n\r\n  // BUTTONS:\r\n  const buttonMushroom = (\r\n    <button\r\n      className={buttonClass.buttonMushroom}\r\n      onClick={() => {\r\n        dispatch({ type: \"MAKE_SUPER\" });\r\n        NoiseMaker(\"power-up\");\r\n        animateButtonPress(`buttonMushroom`);\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonStar = (\r\n    <button \r\n      className={buttonClass.buttonStar} \r\n      onClick={() => {\r\n        handleButtonStar()\r\n        NoiseMaker(\"power-up\");\r\n        animateButtonPress(\"buttonStar\");\r\n      }}\r\n    >\r\n      {\" \"}\r\n      {marioState.starManTimer}{\" \"}\r\n      <span className={buttonClass.buttonStarSpan}></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonEndStar = ( \r\n    <button onClick={() => handleButtonEndStar()}> Cancel Starman </button>\r\n  ); // USED FOR TESTING\r\n\r\n  const buttonEnemy = (\r\n    <button \r\n      className={buttonClass.buttonEnemy} \r\n      onClick={() => {\r\n        handleEnemy();\r\n        animateButtonPress(\"buttonEnemy\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span className=\"walk-enemy\"></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonFire = (\r\n    <button \r\n      className={buttonClass.buttonFire} \r\n      onClick={() => {\r\n        handleFireLogic();\r\n        NoiseMaker(\"power-up\");\r\n        animateButtonPress(\"buttonFire\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonCoin = (\r\n    <button\r\n      className={buttonClass.buttonCoin}\r\n      onClick={() => {\r\n        dispatch({ type: \"ADD_COIN\" });\r\n        if (marioState.coins < 99) {\r\n          NoiseMaker(\"coin\");\r\n        }\r\n        animateButtonPress(\"buttonCoin\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span className=\"glow-coin\"></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonOneUp = (\r\n    <button\r\n      className={buttonClass.buttonOneUp}\r\n      onClick={() => {\r\n        dispatch({ type: \"INCREMENT_LIVES\" });\r\n        NoiseMaker(\"1up\");\r\n        animateButtonPress(\"buttonOneUp\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonBrosToggle = (\r\n    <button\r\n      className={buttonClass.buttonBrosToggle}\r\n      onClick={() => {\r\n        handlePlayerToggle();\r\n        animateButtonPress(\"buttonBrosToggle\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span className={buttonClass.buttonBrosSpan}></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonQuestion = (\r\n    <button\r\n      className={buttonClass.buttonQuestion}\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"pause\");\r\n        animateButtonPress(\"buttonQuestion\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span></span>\r\n    </button>\r\n  );\r\n\r\n  const tryAgain = <button onClick={() => newLifeLogic()}> Try Again </button>; // USED FOR TESTING\r\n\r\n  const newGame = <button onClick={() => handleNewGame()}> New Game </button>; // USED FOR TESTING\r\n  \r\n  return (\r\n    <div className=\"item-button-container\">\r\n      {\" \"}\r\n      {buttonMushroom} {buttonFire} {buttonStar} {buttonEnemy} {buttonCoin}{\" \"}\r\n      {buttonOneUp} {buttonBrosToggle} {buttonQuestion}\r\n      {\" \"}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\"; // redux hooks specific\r\nimport { NoiseMaker } from \"./helpers\";\r\n\r\nexport default function ActionButtons() {\r\n  // Global state management via Redux Hooks:\r\n  const dispatch = useDispatch();\r\n  const marioState = useSelector((state) => state);\r\n\r\n  // Holds update-able CSS class names for buttons:\r\n  /* let buttonClass = {\r\n    buttonJump: \"button-action a \",\r\n    buttonFire: \"button-action b action-fire \",\r\n  }; */\r\n  \r\n  // Manage action button Depressed states:\r\n  /* Object.keys(marioState.actionButtonDepressed).forEach(function (key) {\r\n    switch (true) {\r\n      case marioState.actionButtonDepressed[key]: // Button has been pressed:\r\n        buttonClass[key]  += \"depressed \"; // Add \"depressed\" class to button\r\n        break;\r\n      default:\r\n        // Restore normal button appearance\r\n        buttonClass[key] = buttonClass[key].replace(\"depressed \",\"\");\r\n    }\r\n  }); */\r\n\r\n  // Manage D-Pad appearance:\r\n  /* Object.keys(buttonClass).forEach(key => { \r\n    buttonClass[key] = buttonClass[key].replace(\"d-right\",marioState.dPad);\r\n    buttonClass[key] = buttonClass[key].replace(\"d-left\",marioState.dPad);\r\n    buttonClass[key] = buttonClass[key].replace(\"d-stop\",marioState.dPad);\r\n    buttonClass[key] = buttonClass[key].replace(\"d-up\",marioState.dPad);\r\n    buttonClass[key] = buttonClass[key].replace(\"d-down\",marioState.dPad);\r\n    buttonClass[key] = buttonClass[key].replace(\"d-down\",marioState.dPad);\r\n  }); */\r\n\r\n  // Button-specific helper functions:\r\n  const animateButtonPress = (buttonName) => {\r\n    dispatch({ type: `DEPRESS_ACTION_BUTTON`, payload: buttonName });\r\n    setTimeout(function () {\r\n      dispatch({ type: `UNPRESS_ACTION_BUTTON`, payload: buttonName });\r\n    }, 400);\r\n  }\r\n  const animateDpad = (direction) => {\r\n    dispatch({ type: `UPDATE_DPAD`, payload: direction });\r\n  }\r\n\r\n  // ACTION BUTTONS:\r\n  const nesController = (\r\n    <div \r\n      className=\"controller\"\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"pause\");\r\n      }}\r\n    ></div>\r\n  );\r\n  \r\n  const buttonStop = (\r\n    <button \r\n      className={\"button-action action-stop \"+marioState.dPad}\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        animateDpad(\"d-stop\");\r\n      }}\r\n    >♦</button>\r\n  );\r\n\r\n  const buttonWalkLeft = (\r\n    <button \r\n      className={\"button-action action-left \"+marioState.dPad}\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        animateDpad(\"d-left\");\r\n      }}\r\n    >◀</button>\r\n  );\r\n\r\n  const buttonWalkRight = (\r\n    <button \r\n      className={\"button-action action-right \"+marioState.dPad}\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        animateDpad(\"d-right\");\r\n      }}\r\n    >▶</button>\r\n  );\r\n\r\n  const buttonRun = (\r\n    <button \r\n      className=\"button-action\"\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"pause\");\r\n      }}\r\n    >RUN</button>\r\n  );\r\n\r\n  const buttonJump = (\r\n    <button \r\n      className={`button-action a ${marioState.actionButtonDepressed.buttonJump ? \"depressed\" : \"\"}`}\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"jump\");\r\n        animateButtonPress(\"buttonJump\");\r\n      }}\r\n    >↑</button>\r\n  );\r\n\r\n  const buttonClimb = (\r\n    <button \r\n      className={\"button-action action-climb \"+marioState.dPad}\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        animateDpad(\"d-up\");\r\n      }}\r\n    >▲</button>\r\n  );\r\n\r\n  const buttonDuck = (\r\n    <button \r\n      className={\"button-action action-duck \"+marioState.dPad}\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        animateDpad(\"d-down\");\r\n      }}\r\n    >▼</button>\r\n  );\r\n\r\n  const buttonSwim = (\r\n    <button \r\n      className=\"button-action\"\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"pause\");\r\n      }}\r\n    >SWIM</button>\r\n  );\r\n\r\n  const buttonFire = (\r\n    <button \r\n      className={`button-action b action-fire ${marioState.actionButtonDepressed.buttonFire ? \"depressed\" : \"\"}`}\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"fireball\");\r\n        animateButtonPress(\"buttonFire\");\r\n      }}\r\n    ><span></span></button>\r\n  );\r\n\r\n  return (\r\n    <div className=\"action-button-container\">\r\n      <div className={\"square-buttons-wrap \"+marioState.dPad}>\r\n        <div className=\"square-buttons\">\r\n          {buttonClimb}\r\n          <div className=\"break\"></div> \r\n          {buttonWalkLeft} {buttonStop} {buttonWalkRight}\r\n          <div className=\"break\"></div>\r\n          {buttonDuck}\r\n        </div>\r\n      </div>\r\n      <div className=\"round-buttons\"> {buttonFire} {buttonJump} </div> \r\n    </div>\r\n  );\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport \"./normalize.css\";\r\nimport store from \"./store\";\r\nimport ScoreBoard from \"./scoreboard\";\r\nimport MarioContainer from \"./mariocontainer\";\r\nimport DeathScreen from \"./deathscreen\";\r\nimport Buttons from \"./buttons\";\r\nimport ActionButtons from \"./action-buttons\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ScoreBoard />\r\n      <div className=\"game-container\">\r\n        <div className=\"mario-column\">\r\n          <MarioContainer />\r\n          <ActionButtons />\r\n        </div>\r\n        <div className=\"items-column\">\r\n          <Buttons />\r\n        </div>\r\n        <DeathScreen />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}