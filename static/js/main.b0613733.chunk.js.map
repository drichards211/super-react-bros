{"version":3,"sources":["helpers.js","store.js","timer.js","scoreboard.js","mariocontainer.js","deathscreen.js","buttons.js","action-buttons.js","serviceWorker.js","index.js"],"names":["AddLeadingZeroes","number","places","String","padStart","NoiseMaker","requestedSound","noise","console","log","Audio","play","initialState","brother","super","fire","invincible","starManTimer","alive","inPlay","helpVisible","points","lives","coins","timer","buttonDepressed","buttonMushroom","buttonFire","buttonCoin","buttonStar","buttonEnemy","buttonOneUp","buttonBrosToggle","buttonQuestion","actionButtonDepressed","buttonStop","buttonWalkLeft","buttonWalkRight","buttonClimb","buttonDuck","buttonJump","dPad","brotherSlipLeft","brotherSlipRight","store","createStore","state","action","type","jumping","parseInt","payload","getState","countDown","starManCountDown","StartTimer","setInterval","marioState","clearInterval","StopStarManTimer","dispatch","ManageDeathScreen","StopAllTimers","setTimeout","ScoreBoard","useDispatch","useSelector","useEffect","PlayerNumLives","toUpperCase","className","PointsCounter","CoinCounter","numCoins","handleCoinCounter","Timer","MarioContainer","marioClass","DeathScreen","messageClass","userMessage","tryAgain","MarioMessages","message","onClick","Buttons","buttonClass","buttonStarSpan","buttonBrosSpan","Object","keys","forEach","key","replace","handleButtonStar","animateButtonPress","buttonName","handleEnemy","handleFireLogic","ActionButtons","handleMarioSlip","Boolean","window","location","hostname","match","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b0613733.chunk.js","sourcesContent":["export function AddLeadingZeroes(number, places) {\r\n  return String(number).padStart(places, \"0\"); // Stringifies number and adds leading zeroes:\r\n}\r\n\r\nexport function CapitalizeMe(string) {\r\n  return string.toUpperCase();\r\n}\r\n\r\nexport function NoiseMaker(requestedSound) {\r\n  let noise = requestedSound || \"silent\";\r\n  if (noise !== \"silent\") {\r\n    console.log(`NoiseMaker() ran: \"${noise}.mp3\"`)\r\n    new Audio(`/super-react-bros/${noise}.mp3`).play();\r\n  }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport { AddLeadingZeroes } from \"./helpers\";\r\n\r\n// REDUX STATE MANAGEMENT:\r\nconst initialState = {\r\n  brother: \"mario\",\r\n  super: false,\r\n  fire: false,\r\n  invincible: false,\r\n  starManTimer: 0,\r\n  alive: true,\r\n  inPlay: true,\r\n  helpVisible: false,\r\n  points: \"000000\",\r\n  lives: 3,\r\n  coins: 0,\r\n  timer: 400,\r\n  buttonDepressed: {\r\n    buttonMushroom: false,\r\n    buttonFire: false,\r\n    buttonCoin: false,\r\n    buttonStar: false,\r\n    buttonEnemy: false,\r\n    buttonOneUp: false,\r\n    buttonBrosToggle: false,\r\n    buttonQuestion: false,\r\n  },\r\n  actionButtonDepressed: {\r\n    buttonStop: false,\r\n    buttonWalkLeft: false,\r\n    buttonWalkRight: false,\r\n    buttonClimb: false,\r\n    buttonDuck: false,\r\n    buttonJump: false,\r\n    buttonFire: false,\r\n  },\r\n  dPad: \"d-right\",\r\n  brotherSlipLeft: false,\r\n  brotherSlipRight: false,\r\n};\r\n\r\nfunction reducer(state = initialState, action) {\r\n  if ( action.type !== \"DECREMENT_TIMER\" \r\n    && action.type !== \"DECREMENT_STARMANTIMER\" ) { \r\n      console.log(`reducer() ran ${action.type}`);\r\n  }\r\n  switch (action.type) {\r\n    case \"INCREMENT_LIVES\":\r\n      return {\r\n        ...state,\r\n        lives: state.lives + 1,\r\n      };\r\n    case \"DECREMENT_LIVES\":\r\n      return {\r\n        ...state,\r\n        lives: state.lives - 1,\r\n      };\r\n    case \"START_NEW_LIFE\":\r\n      return {\r\n        ...state,\r\n        alive: true,\r\n        invincible: false,\r\n        starManTimer: 0,\r\n        super: false,\r\n        fire: false,\r\n        timer: 400,\r\n        buttonDepressed: {\r\n          buttonMushroom: false,\r\n          buttonFire: false,\r\n          buttonCoin: false,\r\n          buttonStar: false,\r\n          buttonEnemy: false,\r\n          buttonOneUp: false,\r\n          buttonBrosToggle: false,\r\n          buttonQuestion: false,\r\n        },\r\n        actionButtonDepressed: {\r\n          buttonStop: false,\r\n          buttonWalkLeft: false,\r\n          buttonWalkRight: false,\r\n          buttonClimb: false,\r\n          buttonDuck: false,\r\n          buttonJump: false,\r\n          buttonFire: false,\r\n        },\r\n        dPad: \"d-right\",\r\n        brotherSlipLeft: false,\r\n        brotherSlipRight: false,\r\n        jumping: false,\r\n      };\r\n    case \"MAKE_SUPER\":\r\n      return {\r\n        ...state,\r\n        super: true,\r\n        points: AddLeadingZeroes(parseInt(state.points) + 1000, 6),\r\n      };\r\n    case \"MAKE_FIRE\":\r\n      return {\r\n        ...state,\r\n        fire: true,\r\n        super: true,\r\n        points: AddLeadingZeroes(parseInt(state.points) + 1000, 6),\r\n      };\r\n    case \"MAKE_INVINCIBLE\":\r\n      return {\r\n        ...state,\r\n        invincible: true,\r\n        starManTimer: 10,\r\n        points: AddLeadingZeroes(parseInt(state.points) + 1000, 6),\r\n      };\r\n    case \"END_INVINCIBLE\":\r\n      return {\r\n        ...state,\r\n        invincible: false,\r\n        starManTimer: 0,\r\n      };\r\n    case \"MAKE_SMALL\":\r\n      return {\r\n        ...state,\r\n        super: false,\r\n      };\r\n    case \"LOSE_FIRE\":\r\n      return {\r\n        ...state,\r\n        fire: false,\r\n        super: false,\r\n      };\r\n    case \"LOSE_LIFE\":\r\n      return {\r\n        ...state,\r\n        alive: false,\r\n        lives: state.lives - 1,\r\n      };\r\n    case \"SELECT_MARIO\":\r\n      return {\r\n        ...state,\r\n        brother: \"mario\",\r\n      };\r\n    case \"SELECT_LUIGI\":\r\n      return {\r\n        ...state,\r\n        brother: \"luigi\",\r\n      };\r\n    case \"ADD_COIN\":\r\n      return {\r\n        ...state,\r\n        coins: state.coins + 1,\r\n        points: AddLeadingZeroes(parseInt(state.points) + 200, 6),\r\n      };\r\n    case \"RESET_100_COINS\":\r\n      return {\r\n        ...state,\r\n        coins: 0,\r\n        lives: state.lives + 1,\r\n      };\r\n    case \"RESET_GAME\":\r\n      // RESET marioState to initial paramaters, but keep current brother:\r\n      return {\r\n        ...initialState,\r\n        brother: state.brother,\r\n      };\r\n    case \"RESET_STARMANTIMER\":\r\n      return {\r\n        ...state,\r\n        starManTimer: 0,\r\n      };\r\n    case \"DECREMENT_TIMER\":\r\n      return {\r\n        ...state,\r\n        timer: state.timer - 1,\r\n      };\r\n    case \"DECREMENT_STARMANTIMER\":\r\n      return {\r\n        ...state,\r\n        starManTimer: state.starManTimer - 1,\r\n      };\r\n    case \"SHOW_DEATH_SCREEN\":\r\n      return {\r\n        ...state,\r\n        inPlay: false,\r\n      };\r\n    case \"HIDE_DEATH_SCREEN\":\r\n      return {\r\n        ...state,\r\n        inPlay: true,\r\n      };\r\n    case \"SHOW_HELP\":\r\n      return {\r\n        ...state,\r\n        helpVisible: true,\r\n      };\r\n    case \"DEPRESS_BUTTON\":\r\n      return {\r\n          ...state,\r\n          buttonDepressed: {\r\n            ...state.buttonDepressed,\r\n            [action.payload]: true,\r\n          }\r\n      };\r\n    case \"UNPRESS_BUTTON\":\r\n      return {\r\n          ...state,\r\n          buttonDepressed: {\r\n            ...state.buttonDepressed,\r\n            [action.payload]: false,\r\n          }\r\n      };\r\n    case \"DEPRESS_ACTION_BUTTON\":\r\n      return {\r\n          ...state,\r\n          actionButtonDepressed: {\r\n            ...state.actionButtonDepressed,\r\n            [action.payload]: true,\r\n          }\r\n      };\r\n    case \"UNPRESS_ACTION_BUTTON\":\r\n      return {\r\n          ...state,\r\n          actionButtonDepressed: {\r\n            ...state.actionButtonDepressed,\r\n            [action.payload]: false,\r\n          }\r\n      };\r\n    case \"UPDATE_DPAD\":\r\n      return {\r\n        ...state,\r\n        dPad: action.payload,\r\n      };\r\n    case \"SLIP_LEFT\":\r\n      return {\r\n        ...state,\r\n        brotherSlipLeft: true,\r\n      };\r\n    case \"SLIP_RIGHT\":\r\n      return {\r\n        ...state,\r\n        brotherSlipRight: true,\r\n      };\r\n    case \"CANCEL_SLIP\":\r\n      return {\r\n        ...state,\r\n        brotherSlipLeft: false,\r\n        brotherSlipRight: false,\r\n      };\r\n    case \"JUMP\":\r\n      return {\r\n        ...state,\r\n        jumping: true,\r\n      }\r\n    case \"CANCEL_JUMP\":\r\n      return {\r\n        ...state,\r\n        jumping: false,\r\n      }\r\n    default:\r\n      console.log(`${action.type} is an invalid reducer action.`);\r\n      return state; // Return the unchanged state if action is unclear\r\n  }\r\n}\r\n\r\nconst store = createStore(reducer);\r\nconsole.log(\"created\", store.getState());\r\n\r\nexport default store;\r\n","import { NoiseMaker } from \"./helpers\";\r\nimport store from \"./store\";\r\n\r\n// Variables declared early so clearInterval() can actually stop the timers:\r\nlet countDown;\r\nlet starManCountDown;\r\n\r\nexport function StartTimer() {\r\n  console.log(\"StartTimer() ran\");\r\n  countDown = setInterval(function () {\r\n    const marioState = store.getState(); // obtain fresh copy of redux state on each iteration:\r\n    if (marioState.timer === 101) {\r\n      NoiseMaker(\"time-warning\");\r\n    }\r\n    if (marioState.timer === 1) {\r\n      StopTimer();\r\n      StopStarManTimer(); // Stop StarMan countdown if Mario/Luigi is invincible when timer runs out\r\n      store.dispatch({ type: \"DECREMENT_TIMER\" }); // Final decrement to zero\r\n      store.dispatch({ type: \"LOSE_LIFE\" }); // Kill Mario/Luigi if timer runs out\r\n      NoiseMaker(\"death\");\r\n      ManageDeathScreen();\r\n    } else {\r\n      store.dispatch({ type: \"DECREMENT_TIMER\" });\r\n    }\r\n  }, 420);\r\n}\r\n\r\nexport function StopTimer() {\r\n  console.log(\"StopTimer() ran\");\r\n  clearInterval(countDown);\r\n}\r\n\r\nexport function StartStarManTimer() {\r\n  console.log(\"StartStarManTimer() ran\");\r\n  starManCountDown = setInterval(function () {\r\n    const marioState = store.getState(); // obtain fresh copy of redux state on each iteration:\r\n    if (marioState.starManTimer === 1) {\r\n      StopStarManTimer();\r\n      store.dispatch({ type: \"END_INVINCIBLE\" });\r\n    } else {\r\n      store.dispatch({ type: \"DECREMENT_STARMANTIMER\" });\r\n    }\r\n  }, 1000);\r\n}\r\n\r\nexport function StopStarManTimer() {\r\n  console.log(\"StopStarManTimer() ran\");\r\n  clearInterval(starManCountDown);\r\n}\r\n\r\nexport function StopAllTimers() {\r\n  console.log(\"StopAllTimers() ran\");\r\n  clearInterval(countDown);\r\n  clearInterval(starManCountDown);\r\n}\r\n\r\nexport function ManageDeathScreen() {\r\n  // Wait 2 seconds for death animation to finish, then show Death Screen:\r\n  console.log(\"ManageDeathScreen() ran\");\r\n  const marioState = store.getState();\r\n  setTimeout(function () {\r\n    store.dispatch({ type: \"SHOW_DEATH_SCREEN\" });\r\n    if (marioState.lives === 0) {\r\n      NoiseMaker(\"game-over\");\r\n    }\r\n    if (marioState.lives > 0) {\r\n      // Mario-Luigi has extra lives remaining. Hold death screen for 3 seconds, then resume game.\r\n      /* if (marioState.timer) */\r\n      setTimeout(function () {\r\n        store.dispatch({ type: \"START_NEW_LIFE\" });\r\n        store.dispatch({ type: \"HIDE_DEATH_SCREEN\" });\r\n        StartTimer();\r\n      }, 3000);\r\n    }\r\n  }, 2000);\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { StartTimer } from './timer';\r\nimport { AddLeadingZeroes, NoiseMaker } from './helpers'; \r\n\r\nexport default function ScoreBoard() {\r\n\r\n  // Global state management via Redux Hooks:\r\n  const dispatch = useDispatch();\r\n  const marioState = useSelector((state) => state);\r\n\r\n  // Start timer on initial load only:\r\n  useEffect(() => {\r\n    StartTimer();\r\n  }, []);\r\n\r\n  //SCOREBOARD LOGIC HANDLERS:\r\n  const handleCoinCounter = () => {\r\n    let numCoins = AddLeadingZeroes(marioState.coins, 2);\r\n    if (marioState.coins > 99) {\r\n      NoiseMaker(\"1up\"); \r\n      dispatch({ type: \"RESET_100_COINS\" }); \r\n    }\r\n    return numCoins;\r\n  }\r\n\r\n  // SCOREBOARD CHILDREN:\r\n  const PlayerNumLives = ( <div> {marioState.brother.toUpperCase()}<span className=\"small-spacer\">×</span>{marioState.lives} </div> );\r\n    \r\n  const PointsCounter = () => {\r\n    return ( <div> {marioState.points} </div> );\r\n  }\r\n  \r\n  const CoinCounter = () => {\r\n    return ( <div \r\n      className=\"coin-counter\">\r\n      <div className=\"mini-coin-sprite\"></div>\r\n        ×{handleCoinCounter()} \r\n    </div> );\r\n  }\r\n  \r\n  const Timer = () => {\r\n    return ( <div> TIME <br /> \r\n      {AddLeadingZeroes(marioState.timer, 3)} \r\n    </div> )\r\n  }\r\n\r\n  return ( <div> \r\n    <div className=\"scoreboard row\"> \r\n      <div className=\"sb-col-01\"> \r\n        {PlayerNumLives} \r\n        <PointsCounter/>\r\n      </div> \r\n      <div className=\"sb-col-02\">\r\n        <CoinCounter/> \r\n      </div>\r\n      <div className=\"sb-col-03\"> \r\n        <Timer/>\r\n      </div>\r\n    </div>\r\n  </div> );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nexport default function MarioContainer() {\r\n  const dispatch = useDispatch();\r\n  const marioState = useSelector((state) => state);\r\n\r\n  let marioClass = \"Render-brother \"; // Holds different CSS class names for rendering Mario/Luigi sprites\r\n\r\n  // MARIO SPRITE DISPLAY LOGIC:\r\n  switch (true) {\r\n    case marioState.alive && marioState.invincible: // Mario-Luigi is INVINCIBLE:\r\n      marioClass += marioState.super ? \"invincible-super\" : \"invincible\";\r\n      break;\r\n    case marioState.alive && marioState.brother === \"mario\": // Mario is ALIVE:\r\n      if (marioState.fire) {\r\n        // Mario is FIRE:\r\n        marioClass += \"fire\";\r\n      } else {\r\n        marioClass += marioState.super ? \"mario-super\" : \"mario\"; // SUPER Mario / Mario\r\n      }\r\n      break;\r\n    case marioState.alive && marioState.brother === \"luigi\": // Luigi is ALIVE:\r\n      if (marioState.fire) {\r\n        // Luigi is FIRE:\r\n        marioClass += \"fire\";\r\n      } else {\r\n        marioClass += marioState.super ? \"luigi-super\" : \"luigi\"; // SUPER Luigi / Luigi\r\n      }\r\n      break;\r\n    default:\r\n      // MARIO-LUIGI is DEAD:\r\n      switch (true) {\r\n        case marioState.timer === 0 && marioState.fire: // TIMER ran out while Mario-Luigi was Fire:\r\n          marioClass += \"fire-dead\";\r\n          console.log(\"Timer ran out while Mario-Luigi was Fire\");\r\n          break;\r\n        case marioState.timer === 0: // TIMER ran out:\r\n          console.log(\"Timer ran out\");\r\n          if (marioState.brother === \"luigi\") {\r\n            marioClass += \"luigi-dead\";\r\n          } else {\r\n            marioClass += \"mario-dead\";\r\n          }\r\n          break;\r\n        case marioState.brother === \"luigi\": // Luigi is DEAD:\r\n          marioClass += \"luigi-dead\";\r\n          break;\r\n        default:\r\n          // Mario is DEAD:\r\n          marioClass += \"mario-dead\";\r\n        }\r\n  }\r\n  // UPDATE MARIO DIRECTION WHEN D-PAD CHANGES:\r\n    marioClass += \" \" + marioState.dPad;\r\n  // UPDATE MARIO CLASS WHEN SLIPPING:\r\n    marioClass += marioState.brotherSlipLeft ? \" slip-left\" : \"\";\r\n    marioClass += marioState.brotherSlipRight ? \" slip-right\" : \"\";\r\n  // UPDATE MARIO CLASS WHEN JUMPING:\r\n    marioClass += marioState.jumping ? \" jumping\": \"\";\r\n  return (\r\n    <div className=\"mario-container\">\r\n      {\" \"}\r\n      <div className={marioClass}></div>{\" \"}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { StartTimer, StopAllTimers } from \"./timer\";\r\n\r\nexport default function DeathScreen() {\r\n  const dispatch = useDispatch();\r\n  const marioState = useSelector((state) => state);\r\n\r\n  let messageClass = \"message-holder \"; // Holds different CSS class names for the Death and Game Over messages\r\n  let userMessage = \"\";\r\n  let tryAgain = \"button-restart \";\r\n\r\n  const handleNewGame = () => {\r\n    dispatch({ type: \"RESET_GAME\" });\r\n    StopAllTimers();\r\n    StartTimer();\r\n  };\r\n\r\n  const MarioMessages = ({ message }) => {\r\n    return (\r\n      <div className={messageClass}>\r\n        {\" \"}\r\n        <div className=\"message-contents\">\r\n          {message}\r\n          <br /><br />\r\n          <button\r\n            className={tryAgain}\r\n            onClick={() => handleNewGame()}\r\n          >\r\n            TRY AGAIN ?\r\n          </button>\r\n        </div>{\" \"}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  // DEATH SCREEN DISPLAY LOGIC:\r\n  if (!marioState.inPlay) {\r\n    // Display Death Screen:\r\n    messageClass += \"death-screen\";\r\n  }\r\n  if (!marioState.alive) {\r\n    // Mario-Luigi is DEAD:\r\n    if (marioState.timer === 0) {\r\n      // Timer ran out:\r\n      userMessage = marioState.lives === 0 ? \"GAME OVER\" : \"TIME UP\";\r\n      tryAgain += marioState.lives === 0 ? \"show-button\" : \"\";\r\n    } else {\r\n      // Mario-Luigi DEAD from enemy:\r\n      userMessage =\r\n        marioState.lives === 0\r\n          ? \"GAME OVER\"\r\n          : marioState.brother === \"luigi\"\r\n          ? \"LUIGI × \" + marioState.lives\r\n          : \"MARIO × \" + marioState.lives;\r\n      tryAgain += marioState.lives === 0 ? \"show-button\" : \"\";\r\n      \r\n    }\r\n  }\r\n\r\n  return <MarioMessages message={userMessage} />;\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\"; // redux hooks specific\r\nimport { NoiseMaker } from \"./helpers\";\r\nimport {\r\n  StartStarManTimer,\r\n  StopStarManTimer,\r\n  StartTimer,\r\n  StopAllTimers,\r\n  ManageDeathScreen,\r\n} from \"./timer\";\r\n\r\nexport default function Buttons() {\r\n  // Global state management via Redux Hooks:\r\n  const dispatch = useDispatch();\r\n  const marioState = useSelector((state) => state);\r\n\r\n  // Holds update-able CSS class names for buttons:\r\n  /* let buttonStarClass = \"item-button button-starman \"; */\r\n  /* let buttonStarSpanClass = \"\"; */\r\n  let buttonBrosToggleClass = \"\";\r\n  let buttonClass = {\r\n    buttonMushroom: \"item-button button-mushroom \",\r\n    buttonFire: \"item-button button-fire \",\r\n    buttonStar: \"item-button button-starman \",\r\n    buttonStarSpan: \"\",\r\n    buttonEnemy: \"item-button button-enemy \",\r\n    buttonCoin: \"item-button button-coin \",\r\n    buttonOneUp: \"item-button button-oneup \",\r\n    buttonBrosToggle: \"item-button button-bros-toggle \",\r\n    buttonBrosSpan: \"\",\r\n    buttonQuestion: \"item-button button-question \",\r\n  }\r\n\r\n  // Manage buttonStar appearance:\r\n  switch (true) {\r\n    case marioState.invincible: // Mario-Luigi is INVINCIBLE:\r\n      buttonClass.buttonStar += \"show-star-countdown \";\r\n      buttonClass.buttonStarSpan += \"flicker-star \";\r\n      break;\r\n    default:\r\n      // Mario-Luigi is NOT invincible:\r\n      buttonClass.buttonStar += \"hide-star-countdown \";\r\n  }\r\n\r\n  // Manage buttonToggleBros appearance:\r\n  switch (true) {\r\n    case marioState.brother === \"luigi\": // Active bros is Luigi:\r\n      buttonClass.buttonBrosSpan += \"toggle-mario\"; // Display Mario toggle\r\n      break;\r\n    default:\r\n      // Active bros is Mario:\r\n      buttonClass.buttonBrosSpan += \"toggle-luigi\"; // Display Luigi toggle\r\n  }\r\n\r\n  // Manage button Depressed states:\r\n  Object.keys(marioState.buttonDepressed).forEach(function (key) {\r\n    switch (true) {\r\n      case marioState.buttonDepressed[key]: // Button has been pressed:\r\n        buttonClass[key]  += \"depressed \"; // Add \"depressed\" class to button\r\n        break;\r\n      default:\r\n        // Restore normal button appearance\r\n        buttonClass[key] = buttonClass[key].replace(\"depressed \",\"\");\r\n    }\r\n  });\r\n  \r\n  // Button-specific helper functions:\r\n  const handleEnemy = () => {\r\n    switch (true) {\r\n      case marioState.invincible: // Mario/Luigi is Invincible, no state change\r\n        break;\r\n      case marioState.fire:\r\n        dispatch({ type: \"LOSE_FIRE\" });\r\n        NoiseMaker(\"shrink\");\r\n        break;\r\n      case marioState.super:\r\n        dispatch({ type: \"MAKE_SMALL\" });\r\n        NoiseMaker(\"shrink\");\r\n        break;\r\n      default:\r\n        StopAllTimers();\r\n        dispatch({ type: \"LOSE_LIFE\" });\r\n        NoiseMaker(\"death\");\r\n        ManageDeathScreen();\r\n    }\r\n  };\r\n\r\n  const handleNewGame = () => {\r\n    dispatch({ type: \"RESET_GAME\" });\r\n    StopAllTimers();\r\n    StartTimer();\r\n  };\r\n\r\n  const newLifeLogic = () => {\r\n    if (marioState.alive) {\r\n      alert(\"Mario/Luigi is still alive. Try dying first.\");\r\n    } else if (marioState.lives > 0) {\r\n      // Load new life, reset state\r\n      dispatch({ type: \"START_NEW_LIFE\" });\r\n      StartTimer();\r\n    } else {\r\n      alert(\"GAME OVER. Please start a new game.\");\r\n    }\r\n  };\r\n\r\n  const handleFireLogic = () => {\r\n    switch (marioState.super) {\r\n      case true:\r\n        dispatch({ type: \"MAKE_FIRE\" });\r\n        break;\r\n      default:\r\n        dispatch({ type: \"MAKE_SUPER\" });\r\n    }\r\n  };\r\n\r\n  const handleButtonStar = () => {\r\n    dispatch({ type: \"MAKE_INVINCIBLE\" });\r\n    StopStarManTimer(); // End any ongoing timer before starting another countdown\r\n    StartStarManTimer();\r\n  };\r\n\r\n  const handleButtonEndStar = () => {\r\n    dispatch({ type: \"END_INVINCIBLE\" });\r\n    StopStarManTimer();\r\n  };\r\n\r\n  const handlePlayerToggle = () => {\r\n    if (marioState.brother === \"mario\") {\r\n      dispatch({ type: \"SELECT_LUIGI\" });\r\n    } else {\r\n      dispatch({ type: \"SELECT_MARIO\" });\r\n    }\r\n  };\r\n\r\n  const animateButtonPress = (buttonName) => {\r\n    dispatch({ type: `DEPRESS_BUTTON`, payload: `${buttonName}` });\r\n    setTimeout(function () {\r\n      dispatch({ type: `UNPRESS_BUTTON`, payload: `${buttonName}` });  \r\n    }, 400);\r\n  }\r\n\r\n  // BUTTONS:\r\n  const buttonMushroom = (\r\n    <button\r\n      className={buttonClass.buttonMushroom}\r\n      onClick={() => {\r\n        dispatch({ type: \"MAKE_SUPER\" });\r\n        NoiseMaker(\"power-up\");\r\n        animateButtonPress(`buttonMushroom`);\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonStar = (\r\n    <button \r\n      className={buttonClass.buttonStar} \r\n      onClick={() => {\r\n        handleButtonStar()\r\n        NoiseMaker(\"power-up\");\r\n        animateButtonPress(\"buttonStar\");\r\n      }}\r\n    >\r\n      {\" \"}\r\n      {marioState.starManTimer}{\" \"}\r\n      <span className={buttonClass.buttonStarSpan}></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonEndStar = ( \r\n    <button onClick={() => handleButtonEndStar()}> Cancel Starman </button>\r\n  ); // USED FOR TESTING\r\n\r\n  const buttonEnemy = (\r\n    <button \r\n      className={buttonClass.buttonEnemy} \r\n      onClick={() => {\r\n        handleEnemy();\r\n        animateButtonPress(\"buttonEnemy\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span className=\"walk-enemy\"></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonFire = (\r\n    <button \r\n      className={buttonClass.buttonFire} \r\n      onClick={() => {\r\n        handleFireLogic();\r\n        NoiseMaker(\"power-up\");\r\n        animateButtonPress(\"buttonFire\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonCoin = (\r\n    <button\r\n      className={buttonClass.buttonCoin}\r\n      onClick={() => {\r\n        dispatch({ type: \"ADD_COIN\" });\r\n        if (marioState.coins < 99) {\r\n          NoiseMaker(\"coin\");\r\n        }\r\n        animateButtonPress(\"buttonCoin\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span className=\"glow-coin\"></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonOneUp = (\r\n    <button\r\n      className={buttonClass.buttonOneUp}\r\n      onClick={() => {\r\n        dispatch({ type: \"INCREMENT_LIVES\" });\r\n        NoiseMaker(\"1up\");\r\n        animateButtonPress(\"buttonOneUp\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonBrosToggle = (\r\n    <button\r\n      className={buttonClass.buttonBrosToggle}\r\n      onClick={() => {\r\n        handlePlayerToggle();\r\n        animateButtonPress(\"buttonBrosToggle\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span className={buttonClass.buttonBrosSpan}></span>\r\n    </button>\r\n  );\r\n\r\n  const buttonQuestion = (\r\n    <button\r\n      className={buttonClass.buttonQuestion}\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"pause\");\r\n        animateButtonPress(\"buttonQuestion\");\r\n      }}\r\n    >\r\n      <div className=\"align-me\">_</div>\r\n      <span></span>\r\n    </button>\r\n  );\r\n\r\n  const tryAgain = <button onClick={() => newLifeLogic()}> Try Again </button>; // USED FOR TESTING\r\n\r\n  const newGame = <button onClick={() => handleNewGame()}> New Game </button>; // USED FOR TESTING\r\n  \r\n  return (\r\n    <div className=\"item-button-container\">\r\n      {\" \"}\r\n      {buttonMushroom} {buttonFire} {buttonStar} {buttonEnemy} {buttonCoin}{\" \"}\r\n      {buttonOneUp} {buttonBrosToggle} {buttonQuestion}\r\n      {\" \"}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\"; // redux hooks specific\r\nimport { NoiseMaker } from \"./helpers\";\r\n\r\nexport default function ActionButtons() {\r\n  // Global state management via Redux Hooks:\r\n  const dispatch = useDispatch();\r\n  const marioState = useSelector((state) => state);\r\n\r\n  // Holds update-able CSS class names for buttons:\r\n  /* let buttonClass = {\r\n    buttonJump: \"button-action a \",\r\n    buttonFire: \"button-action b action-fire \",\r\n  }; */\r\n  \r\n  // Manage action button Depressed states:\r\n  /* Object.keys(marioState.actionButtonDepressed).forEach(function (key) {\r\n    switch (true) {\r\n      case marioState.actionButtonDepressed[key]: // Button has been pressed:\r\n        buttonClass[key]  += \"depressed \"; // Add \"depressed\" class to button\r\n        break;\r\n      default:\r\n        // Restore normal button appearance\r\n        buttonClass[key] = buttonClass[key].replace(\"depressed \",\"\");\r\n    }\r\n  }); */\r\n\r\n  // Manage D-Pad appearance:\r\n  /* Object.keys(buttonClass).forEach(key => { \r\n    buttonClass[key] = buttonClass[key].replace(\"d-right\",marioState.dPad);\r\n    buttonClass[key] = buttonClass[key].replace(\"d-left\",marioState.dPad);\r\n    buttonClass[key] = buttonClass[key].replace(\"d-stop\",marioState.dPad);\r\n    buttonClass[key] = buttonClass[key].replace(\"d-up\",marioState.dPad);\r\n    buttonClass[key] = buttonClass[key].replace(\"d-down\",marioState.dPad);\r\n    buttonClass[key] = buttonClass[key].replace(\"d-down\",marioState.dPad);\r\n  }); */\r\n\r\n  // Button-specific helper functions:\r\n  const animateButtonPress = (buttonName) => {\r\n    dispatch({ type: `DEPRESS_ACTION_BUTTON`, payload: buttonName });\r\n    setTimeout(function () {\r\n      dispatch({ type: `UNPRESS_ACTION_BUTTON`, payload: buttonName });\r\n    }, 400);\r\n  }\r\n  const handleMarioSlip = () => {\r\n    if (marioState.dPad === \"d-left\" || marioState.dPad === \"d-right\") {\r\n      dispatch({ type: `${marioState.dPad === \"d-left\" ? \"SLIP_LEFT\" : \"SLIP_RIGHT\"}` });\r\n        setTimeout(function () {\r\n          dispatch({ type: \"CANCEL_SLIP\"});\r\n        }, 233);\r\n    }\r\n  }\r\n  \r\n  // ACTION BUTTONS:\r\n  const nesController = (\r\n    <div \r\n      className=\"controller\"\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"pause\");\r\n      }}\r\n    ></div>\r\n  );\r\n  \r\n  const buttonStop = (\r\n    <button \r\n      className={`button-action action-stop ${marioState.dPad} ${marioState.actionButtonDepressed.buttonStop ? \"depressed\" : \"\"}`}\r\n      onClick={() => {\r\n        dispatch({ type: `UPDATE_DPAD`, payload: `${marioState.dPad === \"d-left\" ? \"d-stop-left\" : \"d-stop\"}` });\r\n        animateButtonPress(\"buttonStop\");\r\n      }}\r\n    >♦</button>\r\n  );\r\n\r\n  const buttonWalkLeft = (\r\n    <button \r\n      className={`button-action action-left ${marioState.dPad} ${marioState.actionButtonDepressed.buttonWalkLeft ? \"depressed\" : \"\"}`}\r\n      onClick={() => {\r\n        if (marioState.dPad !== \"d-left\") {\r\n          handleMarioSlip();\r\n        }\r\n        dispatch({ type: `UPDATE_DPAD`, payload: \"d-left\" });\r\n        animateButtonPress(\"buttonWalkLeft\");\r\n      }}\r\n    >◀</button>\r\n  );\r\n\r\n  const buttonWalkRight = (\r\n    <button \r\n      className={`button-action action-right ${marioState.dPad} ${marioState.actionButtonDepressed.buttonWalkRight ? \"depressed\" : \"\"}`}\r\n      onClick={() => {\r\n        if (marioState.dPad !== \"d-right\") {\r\n          handleMarioSlip();\r\n        }\r\n        dispatch({ type: `UPDATE_DPAD`, payload: \"d-right\" });\r\n        animateButtonPress(\"buttonWalkRight\");\r\n      }}\r\n    >▶</button>\r\n  );\r\n\r\n  const buttonRun = (\r\n    <button \r\n      className=\"button-action\"\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"pause\");\r\n      }}\r\n    >RUN</button>\r\n  );\r\n\r\n  const buttonJump = (\r\n    <button \r\n      className={`button-action a ${marioState.actionButtonDepressed.buttonJump ? \"depressed\" : \"\"}`}\r\n      onClick={() => {\r\n        dispatch({ type: \"JUMP\" });\r\n        setTimeout(function () {\r\n          dispatch({ type: \"CANCEL_JUMP\"});\r\n        }, 800);\r\n        NoiseMaker(\"jump\");\r\n        animateButtonPress(\"buttonJump\");\r\n      }}\r\n    >↑</button>\r\n  );\r\n\r\n  const buttonClimb = (\r\n    <button \r\n      className={`button-action action-climb ${marioState.dPad} ${marioState.actionButtonDepressed.buttonClimb ? \"depressed\" : \"\"}`}\r\n      onClick={() => {\r\n        dispatch({ type: `UPDATE_DPAD`, payload: \"d-up\" });\r\n        animateButtonPress(\"buttonClimb\");\r\n      }}\r\n    >▲</button>\r\n  );\r\n\r\n  const buttonDuck = (\r\n    <button \r\n      className={`button-action action-duck ${marioState.dPad} ${marioState.actionButtonDepressed.buttonDuck ? \"depressed\" : \"\"}`}\r\n      onClick={() => {\r\n        dispatch({ type: `UPDATE_DPAD`, payload: `${marioState.dPad === \"d-left\" || marioState.dPad === \"d-stop-left\" ? \"d-down-left\" : \"d-down\"}` });\r\n        animateButtonPress(\"buttonDuck\");\r\n      }}\r\n    >▼</button>\r\n  );\r\n\r\n  const buttonSwim = (\r\n    <button \r\n      className=\"button-action\"\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"pause\");\r\n      }}\r\n    >SWIM</button>\r\n  );\r\n\r\n  const buttonFire = (\r\n    <button \r\n      className={`button-action b action-fire ${marioState.actionButtonDepressed.buttonFire ? \"depressed\" : \"\"}`}\r\n      onClick={() => {\r\n        dispatch({ type: \"SHOW_HELP\" });\r\n        NoiseMaker(\"fireball\");\r\n        animateButtonPress(\"buttonFire\");\r\n      }}\r\n    ><span></span></button>\r\n  );\r\n\r\n  return (\r\n    <div className=\"action-button-container\">\r\n      <div className={\"square-buttons-wrap \"+marioState.dPad}>\r\n        <div className=\"square-buttons\">\r\n          {buttonClimb}\r\n          <div className=\"break\"></div> \r\n          {buttonWalkLeft} {buttonStop} {buttonWalkRight}\r\n          <div className=\"break\"></div>\r\n          {buttonDuck}\r\n        </div>\r\n      </div>\r\n      <div className=\"round-buttons\"> {buttonFire} {buttonJump} </div> \r\n    </div>\r\n  );\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport \"./normalize.css\";\r\nimport store from \"./store\";\r\nimport ScoreBoard from \"./scoreboard\";\r\nimport MarioContainer from \"./mariocontainer\";\r\nimport DeathScreen from \"./deathscreen\";\r\nimport Buttons from \"./buttons\";\r\nimport ActionButtons from \"./action-buttons\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ScoreBoard />\r\n      <div className=\"game-container\">\r\n        <div className=\"mario-column\">\r\n          <MarioContainer />\r\n          <ActionButtons />\r\n        </div>\r\n        <div className=\"items-column\">\r\n          <Buttons />\r\n        </div>\r\n        <DeathScreen />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}